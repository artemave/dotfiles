snippet cls
console.log(JSON.stringify(${0:object}, null, 2))
endsnippet

snippet cll
console.log("${1:var}", $1)
endsnippet

snippet opt
var ${1:} = typeof ${2:options} == 'object' && $2.hasOwnProperty('$1')? $2.$1: ${3:undefined}
endsnippet

snippet == "inline hashrocket function with params" i
${1} => ${0}
endsnippet

snippet = "hashrocket function with params" i
(${1}) => {
	${0}
}
endsnippet

snippet ex
expect(${0})
endsnippet

snippet sort "sort" i
sort((a,b) => {
	${0}
})
endsnippet

snippet re "reduce" i
reduce((result, ${1}) => {
	${0}
	return result
}, ${2})
endsnippet

snippet fi "filter" i
filter(${1} => {
	${0}
})
endsnippet

snippet fe "forEach" i
forEach(${1} => {
	${0}
})
endsnippet

snippet ife
if (${1}) {
	${0}
} else {
}
endsnippet

snippet map "map" i
map(${1} => {
	${0}
})
endsnippet

snippet desc
describe('${1:}', () => {
	${0}
})
endsnippet

snippet it
it('${1:}', () => {
	${0}
})
endsnippet

snippet cont
context('${1:}', () => {
	${0}
})
endsnippet

snippet be
beforeEach(() => {
	${0}
})
endsnippet

snippet ae
afterEach(() => {
	${0}
})
endsnippet

snippet req
const ${1:} = require('$1')
endsnippet

snippet pro
new Promise((resolve, reject) => {
	${0}
})
endsnippet

snippet then "promise then" i
then((${1}) => {
	${0}
})
endsnippet

snippet catch "promise catch" i
catch(e => {
	${0}
})
endsnippet

snippet expect
const expect = require('chai').expect
endsnippet
